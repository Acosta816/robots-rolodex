{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","card","id","name","email","CardList","monsters","map","mon","SearchBox","placeholder","handleTyping","type","onChange","e","App","console","log","target","value","setState","prevState","searchField","state","fetch","then","res","json","users","this","filteredMonsters","filter","monster","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,G,YAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,mBACtB,6BAAKL,EAAMI,KAAKE,OAChB,4BAAIN,EAAMI,KAAKG,aCHVC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,CAAmBP,KAAMO,GAAdA,EAAIN,WCJ5CO,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAOH,EAAaG,QC0D3BC,E,kDA7DX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IAsCVc,aAAe,SAACG,GACZE,QAAQC,IAAIH,EAAEI,OAAOC,OACrB,EAAKC,UAAS,SAACC,GAEX,OADAL,QAAQC,IAAR,qBAA0BI,EAAUC,cAC7B,CAAEA,YAAaR,EAAEI,OAAOC,UAChC,kBAAMH,QAAQC,IAAR,qBAA0B,EAAKM,MAAMD,kBA1C9C,EAAKC,MAAQ,CACTjB,SAAU,CACN,CACIH,KAAM,eACND,GAAI,QAER,CACIC,KAAM,WACND,GAAI,YAER,CACIC,KAAM,UACND,GAAI,SAGZoB,YAAa,IAjBF,E,gEAqBE,IAAD,OAChBE,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAG,GACF,EAAKR,UAAS,SAACC,GACX,MAAO,CACHf,SAAS,GAAD,mBACDe,EAAUf,UADT,YAEDsB,a,+BAgBjB,IAAD,EAC6BC,KAAKN,MAA/BjB,EADH,EACGA,SAAUgB,EADb,EACaA,YACZQ,EAAmBxB,EAASyB,QAAO,SAAAC,GAAO,OAAIA,EAAQ7B,KAAK8B,cAAcC,SAASZ,EAAYW,kBAEpG,OACI,sBAAKnC,UAAU,MAAf,UACI,gDACA,cAAC,EAAD,CAAWY,YAAY,oBAAoBC,aAAckB,KAAKlB,eAC9D,cAAC,EAAD,CAAUL,SAAUuB,KAAKN,MAAMD,YAAcQ,EAAmBD,KAAKN,MAAMjB,kB,GAxDzE6B,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0ccd20dc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img alt='monster' src={`https://robohash.org/${props.card.id}?size=180x180`} />\r\n        <h2>{props.card.name}</h2>\r\n        <p>{props.card.email}</p>\r\n    </div>\r\n\r\n);","import React from 'react';\r\nimport { Card } from '../card/card';\r\nimport './card-list.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n                props.monsters.map(mon => <Card key={mon.id} card={mon} />)\r\n            }\r\n        </div>\r\n    )\r\n} ","import React from 'react';\r\nimport './search-box.css';\r\n\r\n\r\nexport const SearchBox = ({ placeholder, handleTyping }) => {\r\n    return (\r\n        <input\r\n            className=\"search\"\r\n            type='search'\r\n            placeholder={placeholder}\r\n            onChange={(e) => handleTyping(e)}\r\n        />\r\n    );\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport { CardList } from './components/card-list/card-list';\r\nimport { SearchBox } from './components/search-box/search-box';\r\n\r\n//by extending into Component, we get not only render and state, also get lifecycle methods like componentDidMount() \r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            monsters: [\r\n                {\r\n                    name: 'Frankenstein',\r\n                    id: 'asdf'\r\n                },\r\n                {\r\n                    name: 'Warewolf',\r\n                    id: 'asdfasdf'\r\n                },\r\n                {\r\n                    name: 'Dracula',\r\n                    id: 'fdsa'\r\n                }\r\n            ],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(users => {\r\n                this.setState((prevState) => {\r\n                    return {\r\n                        monsters: [\r\n                            ...prevState.monsters,\r\n                            ...users\r\n                        ]\r\n                    }\r\n                })\r\n            })\r\n    }\r\n\r\n    //unique trait of arrow funct. allow you to set the scope of the function to bind the \"this\" inside it to the class this arrow function lives on. This replaces having to bind the function as a class method in the class constructor method above.\r\n    handleTyping = (e) => {\r\n        console.log(e.target.value);\r\n        this.setState((prevState) => {\r\n            console.log(`old state: ${prevState.searchField}`);\r\n            return { searchField: e.target.value }\r\n        }, () => console.log(`new state: ${this.state.searchField}`));\r\n    }\r\n\r\n    render() {\r\n        const { monsters, searchField } = this.state;\r\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Robots Rolodex</h1>\r\n                <SearchBox placeholder='search for robots' handleTyping={this.handleTyping} />\r\n                <CardList monsters={this.state.searchField ? filteredMonsters : this.state.monsters} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; //this library is the core of react and jsx syntax\nimport ReactDOM from 'react-dom'; //little robot that interacts with the dom. can be replaced with a mobile interacting robot\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}